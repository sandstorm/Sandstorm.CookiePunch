# Klaro cookie consent, see https://klaro.kiprotect.com/
prototype(Sandstorm.CookiePunch:Consent) < prototype(Neos.Fusion:Component) {
    noCSS = false

    servicesRemainingAfterWhenConditions = ${CookiePunchConfig.filterServicesArrayByWhenCondition(Configuration.setting("Sandstorm.CookiePunch.consent.services"), site)}

    // If you want to prevent an empty CookieConsent modal for your users if all 'when' config keys evaluate to false,
    // override the prototype like this in your project:
    //
    // prototype(Sandstorm.CookiePunch:Consent) {
    //      only render if there is at least one service that has not been filtered out by its 'when' config key
    //      @if.hasServices = ${Array.length(this.servicesRemainingAfterWhenConditions) > 0}
    // }

    renderer = Neos.Fusion:Value {
        @context.cookiePunchConfig = Sandstorm.CookiePunch:Config {
            @context.servicesRemaining = ${props.servicesRemainingAfterWhenConditions}
        }
        @context.cookiePunchConfig.@process.toJson = ${Json.stringify(value)}
        @context.cookiePunch = Neos.Fusion:Case {
            noCSS {
                condition = ${props.noCSS}
                renderer = Neos.Fusion:ResourceUri {
                    path = 'resource://Sandstorm.CookiePunch/Public/build/cookiepunch.nocss.js'
                }
            }
            fallback {
                condition = ${true}
                renderer = Neos.Fusion:ResourceUri {
                    path = 'resource://Sandstorm.CookiePunch/Public/build/cookiepunch.js'
                }
            }
        }

        @context.klaroCssVars = Neos.Fusion:Join {
            1 = ".klaro {"
            2 = Neos.Fusion:Reduce {
                items = ${Configuration.setting("Sandstorm.CookiePunch.consent.styling")}
                itemReducer = ${carry + "--" + itemKey + ": " + item + ";"}
            }
            3 = "}"
        }
        @process.klaroCssVars = ${String.toString(value)}

        value = afx`
            <script defer type="application/javascript">window.cookiePunchConfig={cookiePunchConfig};</script>
            <script defer type="application/javascript" src={cookiePunch}></script>
            <style @if.withCSS={!props.noCSS}>{klaroCssVars}</style>
        `
    }

    // We should never block the consent ;)
    @process.neverBlockScripts = ${CookiePunch.neverBlockTags(["script"], value)}
}
